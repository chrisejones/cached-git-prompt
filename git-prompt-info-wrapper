#!/usr/bin/env bash

set -e

generate_prompt_info=true

# Messy parsing of command line option to resolve the directory that git is
# about to operate on
git_subcommand=""
next_opt_is_target_directory=false
target_directory="."
skip_next_opt=false
for opt in "$@"; do
  if [[ "$skip_next_opt" == true ]]; then
    skip_next_opt=false
    continue
  fi
  if [[ "$next_opt_is_target_directory" == true ]]; then
    target_directory="$opt"
    next_opt_is_target_directory=false
  fi

  case "$git_subcommand" in
  "")
    case "$opt" in
    -C)
      next_opt_is_target_directory=true
      ;;
    -*)
      # Other option
      ;;
    *)
      git_subcommand="$opt"
    esac
    ;;
  clone)
      case "$opt" in
      -o|-b|-u|--reference|--separate-git-dir|--depth|--jobs)
        skip_next_opt=true
        ;;
      -*)
        ;;
      *)
        if [[ "$next_opt_is_target_directory" == false ]]; then
          next_opt_is_target_directory=true
          echo $opt
          if [[ "$opt" =~ .*/([^/]*)$ ]]; then
            target_directory="${BASH_REMATCH[1]}"
            target_directory=${target_directory%".git"}
          else
            generate_prompt_info=false
          fi
          next_opt_is_target_directory=true
        else
          target_directory="$opt"
        fi
        ;;
    esac
    ;;
  worktree)
    # Git worktree not currently handled correctly
    generate_prompt_info=false
    ;;
  esac
done

git "$@"
result=$?

if [[ "$generate_prompt_info" == false ]]; then
  exit $result
fi

# \u2191 up arrow
SYMBOL_GIT_PUSH=$'\xe2\x86\x91'

# \u2193 down arrow
SYMBOL_GIT_PULL=$'\xe2\x86\x93'

# Make git output US english for consistency
git_eng="env LANG=C git"

while IFS= read -r line; do
  if [[ $line =~ ^## ]]; then # header line
    if [[ $line =~ ^##\ (.*)\.\.\. ]]; then
      ref="${BASH_REMATCH[1]}"
    elif [[ $line =~ ^##\ No\ commits\ yet\ on\ (.+) ]]; then
      ref="${BASH_REMATCH[1]}"
    else
      [[ $line =~ ^##\ ([^ ]+) ]] && ref="${BASH_REMATCH[1]}"
    fi
    [[ $line =~ ahead\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PUSH${BASH_REMATCH[1]}"
    [[ $line =~ behind\ ([0-9]+) ]] && marks+=" $SYMBOL_GIT_PULL${BASH_REMATCH[1]}"
  else # branch is modified if output contains more lines after the header line
    # We don't do anything about modification as that can change between
    # invocations of this script.
    break
  fi
done < <($git_eng -C "$target_directory" status --porcelain --branch -uno 2>/dev/null)

if [[ $ref == "HEAD" ]]; then
  ref="DETACHED $($git_eng -C "$target_directory" describe --tags --always 2>/dev/null)"
fi

toplevel=$($git_eng -C "$target_directory" rev-parse --show-toplevel)
echo "$ref$marks" > "$toplevel/.prompt_git_info.txt"

exit $result
